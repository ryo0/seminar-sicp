#lang racket
(require rackunit)
(define (even? n) (= (remainder n 2) 0))
(define (square n) (* n n))
(define (fast-expt b n) (fast-expt-sub b n 1))
(define (fast-expt-sub b n p)
  (cond
    ((= n 0) p)
    ((even? n)
         (fast-expt-sub (square b) (/ n 2)  p))
    (else (fast-expt-sub b (- n 1) (* b p)))
    )
  )

(check-equal? (fast-expt 1 1) 1)
(check-equal? (fast-expt 2 1) 2)
(check-equal? (fast-expt 2 2) 4)
(check-equal? (fast-expt 2 4) 16)
(check-equal? (fast-expt 2 5) 32)
(check-equal? (fast-expt 2 7) 128)
(check-equal? (fast-expt 3 2) 9)
(check-equal? (fast-expt 4 3) 64)
(check-equal? (fast-expt 5 3) 125)
(check-equal? (fast-expt 6 4) 1296)
(check-equal? (fast-expt 6 5) 7776)
